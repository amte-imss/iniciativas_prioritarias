<?php

/**
 * @file
 * Integrate with an LRS using the Tin Can API to store data.
 */

/**
 * Constants.
 */
define('TINCANAPI_CUSTOM_URI', 'http://orw.iminds.be/tincan');

/**
 * Implements hook_menu().
 */
function tincanapi_menu() {
  $items = array();

  $items['admin/config/services/tincanapi'] = array(
    'title' => 'Tin Can API',
    'description' => 'Configure the Tin Can API settings.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tincanapi_admin_form'),
    'access arguments' => array('administer tincanapi configuration'),
    'file' => 'tincanapi.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function tincanapi_permission() {

  $perms = array();

  $perms['administer tincanapi configuration'] = array(
    'title' => t('Administer Tin Can API Configuration'),
  );

  return $perms;
}

/**
 * Create an 'actor' for the LRS.
 *
 * @param mixed $account
 *   Optional. A Drupal user object or a user id.
 *
 * @return array
 *   An array representing an 'actor'.
 */
function tincanapi_get_actor($account = NULL) {

  if (is_null($account)) {
    global $user;
    $account = user_load($user->uid);
  }
  else {
    if (is_int($account)) {
      $account = user_load($account);
    }
  }

  $actor = array();

  if (module_exists('token') && variable_get('tincanapi_statement_actor') && user_is_logged_in()) {
    $actor['name'] = token_replace(variable_get('tincanapi_statement_actor'), array('user' => $account), array('clear' => TRUE));

    if (empty($actor['name'])) {
      $actor['name'] = format_username($account);
    }
  }
  else {
    $actor['name'] = format_username($account);
  }

  if ($account->mail) {
    $actor['mbox'] = 'mailto:' . $account->mail;
  }
  elseif (!empty($actor['name'])) {
    $actor['mbox'] = 'mailto:' . $actor['name'] . '@no-email.' . $_SERVER['SERVER_NAME'];
  }
  else {
    $actor['mbox'] = 'mailto:' . variable_get('site_mail');
  }

  return $actor;
}

/**
 * Resolves a given url to the internal path with a formatted base.
 */
function tincanapi_internal_path($url) {
  global $base_url;

  $formatted_base_url = str_replace(
    array(
      'http://www.',
      'https://www.',
      'https://',
      'https://',
    ), 'http://', $base_url
  );

  $url = str_replace(
    array(
      'http://www.',
      'https://www.',
      'https://',
      'https://',
    ), 'http://', $url
  );

  if (!preg_match("&^[^?#]{1,}\:\/\/&", $url)) {
    return $url;
  }
  elseif (substr($url, 0, strlen($formatted_base_url)) === $formatted_base_url) {
    return substr($url, strlen($formatted_base_url) + 1);
  }
  else {
    return FALSE;
  }
}

/**
 * Return a 'object' for the LRS.
 *
 * @param string $entity_type
 *   The type of entity provided.
 * @param object $entity
 *   A Drupal entity.
 *
 * @return array
 *   An array representing an 'object'.
 */
function tincanapi_get_object($entity_type, $entity) {
  global $base_url;

  $object = array();

  switch ($entity_type) {
    case 'node':
      $content_type = node_type_load($entity->type);

      $id = $entity->nid;
      $name = $entity->title;
      $type_id = $entity->type;
      $type_name = $content_type->name;

      $object['id'] = $base_url . '/' . $entity_type . '/' . $id;
      $object['definition']['name']['en-US'] = $type_name . ': ' . $name;

      $activity_types_collection = array(
        'http://adlnet.gov/expapi/activities/' => array('assessment', 'attempt', 'course', 'file', 'interaction', 'lesson', 'link', 'media', 'meeting', 'module', 'objective', 'performance', 'profile', 'question', 'simulation'),
        'http://id.tincanapi.com/activitytype/' => array('blog', 'book', 'chat-channel', 'chat-message', 'checklist', 'checklist-item', 'code-commit', 'conference', 'conference-session', 'conference-track', 'discussion', 'email', 'essay', 'legacy-learning-standard', 'lms', 'paragraph', 'recipe', 'research-report', 'sales-opportunity', 'scenario', 'school-assignment', 'security-role', 'slide', 'slide-deck', 'source', 'tag', 'test-data-batch', 'tutor-session', 'tweet', 'unit-test', 'unit-test-suite', 'voicemail', 'webinar'),
      );

      foreach ($activity_types_collection as $url => $activity_types) {
        if (in_array($type_id, $activity_types)) {
          $object['definition']['type'] = $url . $type_id;
          break;
        }
      }

      if (!isset($object['definition']['type'])) {
        $object['definition']['type'] = TINCANAPI_CUSTOM_URI . '/content/type/' . $type_id;
      }
      break;

    case 'unknown':
      // Internal url.
      $internal_path = tincanapi_internal_path($entity);
      if ($internal_path) {
        $path = explode('/', drupal_get_normal_path($internal_path));
        if ($path[0] == 'node') {
          return tincanapi_get_object('node', node_load($path[1]));
        }
        else {
          $object['id'] = $base_url . '/' . drupal_get_normal_path($internal_path);
        }
      }
      // External url.
      else {
        $object['id'] = $entity;
      }
      break;
  }

  // Do simplification of url.
  if (variable_get('tincanapi_simplify_id') && tincanapi_internal_path($object['id'])) {
    $object['id'] = str_replace(
      array(
        'http://www.',
        'https://www.',
        'https://',
        'https://',
      ), 'http://', $object['id']
    );
  }

  return $object;
}

/**
 * Return a 'verb' array.
 *
 * @param string $id
 *   The id of the verb.
 * @param string $display
 *   Optional. The display name of the verb.
 *
 * @return array
 *   A 'verb' array.
 */
function tincanapi_get_verb($id, $display = NULL) {

  if (is_null($display)) {
    $display = $id;
  }

  $verb = array();

  $verb['display']['en-US'] = $display;

  $verbs_collection = array(
    'https://w3id.org/xapi/adl/verbs/' => array('abandoned', 'logged-in', 'logged-out', 'satisfied', 'waived'),
    'http://id.tincanapi.com/verb/' => array('adjourned', 'bookmarked', 'called', 'closed-sale', 'created-opportunity', 'focused', 'hired', 'interviewed', 'mentored', 'paused', 'previewed', 'rated', 'replied-to-tweet', 'requested-attention', 'retweeted', 'reviewed', 'skipped', 'tweeted', 'unfocused', 'unregistered', 'viewed', 'voted-down', 'voted-up'),
    'https://brindlewaye.com/xAPITerms/verbs/' => array('added', 'removed', 'ran', 'walked'),
    'http://specification.openbadges.org/xapi/verbs/' => array('earned'),
    'http://future-learning.info/xAPI/verb/' => array('released', 'pressed'),
  );

  foreach ($verbs_collection as $url => $verbs) {
    if (in_array($id, $verbs)) {
      $verb['id'] = $url . $id;
      break;
    }
  }

  if (!isset($verb['id'])) {
    $verb['id'] = 'http://adlnet.gov/expapi/verbs/' . $id;
  }

  return $verb;
}

/**
 * Create an array with the key value and language.
 *
 * @param string $key
 *   The key for the value.
 * @param string $value
 *   The value for the object.
 * @param string $language
 *   Optional. The language.
 *
 * @return array
 *   An array with the value nested in the key and lanuage.
 */
function tincanapi_get_language_value($key, $value, $language = 'en-US') {

  return array(
    $key => array(
      $language => $value,
    ),
  );
}

/**
 * Add a language based value to an existing array.
 *
 * @param array $data
 *   The data array to add the value.
 * @param string $key
 *   The key for the value.
 * @param string $value
 *   The value for the object.
 * @param string $language
 *   Optional. The language.
 */
function tincanapi_add_language_value(array &$data, $key, $value, $language = 'en-US') {

  $data[$key] = array(
    $language => $value,
  );
}

/**
 * Get the page path for an absolute URL.
 *
 * @param string $url
 *   An absolute url.
 *
 * @return string
 *   The page path.
 */
function tincanapi_get_page_path($url) {

  $url = parse_url($url);

  if (!isset($url['path'])) {
    return '';
  }

  $path = substr($url['path'], strlen(base_path()));

  if ($source = drupal_lookup_path('source', $path)) {
    return $source;
  }

  return $path;
}

/**
 * Send the data collection to the LRS.
 *
 * @param array $data
 *   An associative array that conforms to the API specification.
 * @param array $context
 *   The tracking context.
 */
function tincanapi_track_data(array $data, array $context = array()) {
  // Store original object.
  $context['object'] = $data['object'];

  if (!isset($data['actor'])) {
    $data['actor'] = tincanapi_get_actor();

    // Actor is current user, make sure we need to track this particular user if anonymous.
    if (user_is_anonymous() && !variable_get('tincanapi_anonymous')) {
      return;
    }
  }
  elseif (is_object($data['actor'])) {
    $data['actor'] = tincanapi_get_actor($data['actor']);
  }

  if (!isset($context['node'])) {
    $url = $data['object']['id'];

    $path = tincanapi_get_page_path($url);
    $parts = explode('/', $path);

    if (2 == count($parts) && 'node' == $parts[0]) {
      $context['node'] = node_load($parts[1]);
    }
  }

  $object = tincanapi_get_object('unknown', $data['object']['id']);
  $data['object'] = $object + $data['object'];

  if (isset($data["context"]["contextActivities"]["parent"][0]["id"])) {
    $parent = tincanapi_get_object('unknown', $data["context"]["contextActivities"]["parent"][0]["id"]);
    $data["context"]["contextActivities"]["parent"][0]["id"] = $parent['id'];
  }

  if (isset($data["context"]["contextActivities"]["grouping"][0]["id"])) {
    $grouping = tincanapi_get_object('unknown', $data["context"]["contextActivities"]["grouping"][0]["id"]);
    $data["context"]["contextActivities"]["grouping"][0]["id"] = $grouping['id'];
  }

  $hook = 'tincanapi_data_alter';
  foreach (module_implements($hook) as $module) {
    $function = $module . '_' . $hook;
    $function($data, $context);
  }
  tincanapi_tincanapi_data_alter($data, $context);

  if (isset($context['ignore']) && $context['ignore']) {
    if (isset($context['sdk_action'])) {
      echo json_encode($context['sdk_action']);
    }

    die();
  }

  tincanapi_send("statements", "POST", $data);
}

/**
 * Implements hook_data_alter().
 */
function tincanapi_tincanapi_data_alter(&$data, &$context) {

  global $base_url;

  // Check if a parent is set from the SDK, if so, we strip the ID.
  if (isset($data['context']['contextActivities']['parent'][0]['id'])) {
    $temp_parent = $data['context']['contextActivities']['parent'][0]['id'];
    $parts = parse_url($temp_parent);
    if (isset($parts['path'])) {
      $potential_node_ids = explode('/', $parts['path']);
      if (count($potential_node_ids) === 3) {
        $potential_node_id = $potential_node_ids[2];
        $parent_node = node_load($potential_node_id);

        if (isset($data['object']['id'])) {
          if ($parent_node && $data['object']['id'] !== $potential_node_id) {
            $context['parent'] = $parent_node;
          }
        }
      }
    }
  }
}

/**
 * Send function.
 */
function tincanapi_send($action, $method, $data) {

  $end_point = variable_get('tincanapi_endpoint');
  $basic_auth_user = variable_get('tincanapi_auth_user');
  $basic_auth_pass = variable_get('tincanapi_auth_password');

  // Sanitize endpoint.
  $end_point = trim($end_point);
  if (substr($end_point, -1) == "/") {
    $end_point = substr($end_point, 0, -1);
  }

  // Sanitize action.
  $action = trim($action);
  if (substr($end_point, 0, 1) == "/") {
    $action = substr($end_point, 1);
  }

  if ($method == "GET" || $method == "DELETE") {
    $action .= "?" . http_build_query($data, '', '&');
  }

  // Init call.
  $url = $end_point . '/' . $action;
  $ch = curl_init($url);

  $headers = array(
    'Content-Type: application/json',
    'X-Experience-API-Version: 1.0.0',
  );

  // Differentiate for different methods.
  if ($method == "POST") {
    $json = json_encode($data);
    curl_setopt($ch, CURLOPT_POST, TRUE);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $json);
    $headers[] = 'Content-Length: ' . strlen($json);
  }
  elseif ($method == "PUT") {
    $json = json_encode($data);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "PUT");
    curl_setopt($ch, CURLOPT_POSTFIELDS, $json);
    $headers[] = 'Content-Length: ' . strlen($json);
  }
  elseif ($method == "DELETE") {
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "DELETE");
  }

  // Doing call.
  curl_setopt($ch, CURLOPT_USERPWD, $basic_auth_user . ':' . $basic_auth_pass);
  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

  $response = curl_exec($ch);

  // Check for connection errors.
  if ($response === FALSE || $response === NULL) {
    watchdog('tincanapi', curl_error($ch), array(), WATCHDOG_DEBUG);
    return;
  }

  $response = json_decode($response, TRUE);
  $error = isset($response["error"]) && $response["error"];

  // Logging.
  if (variable_get('tincanapi_watchdog') || $error) {
    $debug = array(
      "request" => array(
        "url" => $url,
        "post" => $data,
      ),
      "response" => array(
        "txt" => $response,
      ),
    );

    $severity = $error ? WATCHDOG_ERROR : WATCHDOG_DEBUG;
    watchdog('tincanapi', json_encode($debug), array(), $severity);
  }

  return $response;
}

/**
 * Get ISO 8601 duration from a timestamp.
 *
 * @param int $timestamp
 *   A timestamp.
 *
 * @return string
 *   The ISO 8601 duration.
 */
function tincanapi_format_iso8601_duration($timestamp) {

  $units = array(
    'Y' => 365 * 24 * 3600,
    'D' => 24 * 3600,
    'H' => 3600,
    'M' => 60,
    'S' => 1,
  );

  $output = 'P';
  $time = FALSE;

  foreach ($units as $name => &$unit) {
    $value = intval($timestamp / $unit);
    $timestamp -= $value * $unit;
    $unit = $value;

    if ($unit > 0) {
      if (!$time && in_array($name, array('H', 'M', 'S'))) {
        $output .= "T";
        $time = TRUE;
      }

      $output .= strval($unit) . $name;
    }
  }

  if ('P' == $output) {
    $output .= 'T0S';
  }

  return $output;
}
